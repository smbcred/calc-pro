# Build an Amazing R&D Tax Credit Calculator - Complete Guide

## Overview
This guide will help you build a world-class R&D tax credit calculator that combines sophisticated design, smooth animations, and powerful functionality. The calculator will feature a multi-step wizard interface with modern UI patterns, real-time calculations, and conversion-optimized user experience.

## Step 1: Set Up the Foundation

### Core Structure
Create a multi-step wizard calculator with these key sections:
1. **Qualification Discovery** - Interactive activity selection
2. **Business Information** - Company details collection  
3. **Expense Calculator** - R&D expense inputs
4. **Results Display** - Dynamic credit calculations
5. **Checkout Integration** - Seamless payment flow

### File Structure
```
client/src/
├── pages/
│   └── Calculator.tsx        # Main calculator page
├── components/
│   ├── CalculatorWizard.tsx  # Multi-step wizard container
│   ├── QualificationStep.tsx # Step 1: Activities
│   ├── BusinessInfoStep.tsx  # Step 2: Company data
│   ├── ExpenseStep.tsx       # Step 3: Expenses
│   └── ResultsStep.tsx       # Step 4: Results
└── styles/
    └── calculator.css        # Calculator-specific styles
```

## Step 2: Design System Implementation

### CSS Architecture
First, ensure your `index.css` includes the advanced design system:

```css
/* Enhanced Card System - 5 Elevation Levels */
.card-low {
  background: white;
  border: 1px solid #e5e7eb;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border-radius: 1rem;
  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

.card-high {
  background: white;
  border: 1px solid #e5e7eb;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  border-radius: 1rem;
  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

.card-highest {
  background: white;
  border: 1px solid #e5e7eb;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  border-radius: 1rem;
  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Glass Morphism Cards */
.card-glass {
  background: rgba(255, 255, 255, 0.85);
  backdrop-filter: blur(16px) saturate(1.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
}

/* Interactive Hover States */
.card-interactive:hover {
  transform: translateY(-4px);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
              0 0 0 2px #2563eb,
              0 0 20px rgba(37, 99, 235, 0.15);
  border-color: #2563eb;
}

/* Gradient Buttons */
.btn-gradient {
  background: linear-gradient(135deg, #2563eb 0%, #10b981 100%);
  color: white;
  padding: 1rem 2rem;
  border-radius: 0.75rem;
  font-weight: 600;
  box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
  transition: all 300ms cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.btn-gradient:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
}

/* Stagger Animations */
.stagger-container .stagger-item {
  opacity: 0;
  transform: translateY(20px);
  animation: staggerIn 500ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.stagger-container .stagger-item:nth-child(1) { animation-delay: 0ms; }
.stagger-container .stagger-item:nth-child(2) { animation-delay: 100ms; }
.stagger-container .stagger-item:nth-child(3) { animation-delay: 200ms; }
.stagger-container .stagger-item:nth-child(4) { animation-delay: 300ms; }

@keyframes staggerIn {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Success Celebrations */
.success-bounce {
  animation: successBounce 600ms cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

@keyframes successBounce {
  0% { transform: scale(0); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}
```

## Step 3: Build the Multi-Step Wizard

### Main Calculator Component
```tsx
// Calculator.tsx
import React, { useState } from 'react';
import { ChevronRight, Check, Calculator, TrendingUp } from 'lucide-react';

const Calculator: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    activities: [],
    companyInfo: {},
    expenses: {},
    results: null
  });

  const steps = [
    { number: 1, title: 'Qualification', icon: Check },
    { number: 2, title: 'Business Info', icon: Calculator },
    { number: 3, title: 'Expenses', icon: TrendingUp },
    { number: 4, title: 'Results', icon: Check }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Progress Bar */}
      <div className="sticky top-0 z-50 bg-white/80 backdrop-blur-lg border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className={`
                  w-10 h-10 rounded-full flex items-center justify-center
                  transition-all duration-300
                  ${currentStep >= step.number 
                    ? 'bg-gradient-to-r from-blue-600 to-green-600 text-white' 
                    : 'bg-gray-200 text-gray-500'}
                `}>
                  {currentStep > step.number ? (
                    <Check className="w-5 h-5" />
                  ) : (
                    step.number
                  )}
                </div>
                <span className={`ml-2 font-medium ${
                  currentStep >= step.number ? 'text-gray-900' : 'text-gray-500'
                }`}>
                  {step.title}
                </span>
                {index < steps.length - 1 && (
                  <div className={`w-24 h-1 mx-4 rounded ${
                    currentStep > step.number ? 'bg-green-500' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Step Content */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="stagger-container">
          {currentStep === 1 && <QualificationStep {...stepProps} />}
          {currentStep === 2 && <BusinessInfoStep {...stepProps} />}
          {currentStep === 3 && <ExpenseStep {...stepProps} />}
          {currentStep === 4 && <ResultsStep {...stepProps} />}
        </div>
      </div>
    </div>
  );
};
```

## Step 4: Create Amazing Step Components

### Step 1: Qualification Discovery
```tsx
const QualificationStep: React.FC = ({ formData, updateFormData, nextStep }) => {
  const [selectedActivities, setSelectedActivities] = useState<string[]>([]);

  const activities = [
    {
      id: 'ai-tools',
      icon: '🤖',
      title: 'AI & Automation Tools',
      description: 'Using ChatGPT, Claude, or other AI for business processes',
      examples: 'Content creation, data analysis, customer service'
    },
    {
      id: 'custom-development',
      icon: '💻',
      title: 'Custom Development',
      description: 'Building software, apps, or digital solutions',
      examples: 'Web apps, mobile apps, internal tools'
    },
    {
      id: 'process-improvement',
      icon: '📈',
      title: 'Process Innovation',
      description: 'Improving efficiency by 10% or more',
      examples: 'Automation, optimization, new workflows'
    },
    // Add more activities...
  ];

  const toggleActivity = (id: string) => {
    setSelectedActivities(prev =>
      prev.includes(id) 
        ? prev.filter(a => a !== id)
        : [...prev, id]
    );
  };

  return (
    <div className="stagger-item">
      <div className="card-high p-8">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-3">
            Let's Discover Your R&D Activities ✨
          </h2>
          <p className="text-xl text-gray-600">
            Select all the innovative work your business does
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-4 mb-8">
          {activities.map((activity) => (
            <div
              key={activity.id}
              onClick={() => toggleActivity(activity.id)}
              className={`
                card-interactive p-6 cursor-pointer transition-all
                ${selectedActivities.includes(activity.id)
                  ? 'card-glass border-2 border-blue-500 transform scale-105'
                  : 'card-low hover:card-high'}
              `}
            >
              <div className="flex items-start gap-4">
                <div className="text-3xl">{activity.icon}</div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900 mb-1">
                    {activity.title}
                  </h3>
                  <p className="text-sm text-gray-600 mb-2">
                    {activity.description}
                  </p>
                  <p className="text-xs text-gray-500 italic">
                    Examples: {activity.examples}
                  </p>
                </div>
                {selectedActivities.includes(activity.id) && (
                  <Check className="w-6 h-6 text-green-600 success-bounce" />
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Qualification Message */}
        {selectedActivities.length > 0 && (
          <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 mb-8 success-bounce">
            <div className="text-center">
              <p className="text-lg font-semibold text-gray-900">
                {selectedActivities.length <= 2 && "Good start! You likely qualify for credits. 🎯"}
                {selectedActivities.length > 2 && selectedActivities.length <= 4 && 
                  "Excellent! You're doing significant R&D work. 🚀"}
                {selectedActivities.length > 4 && 
                  "Wow! You might be leaving serious money on the table. 💰"}
              </p>
            </div>
          </div>
        )}

        <button
          onClick={() => {
            updateFormData({ activities: selectedActivities });
            nextStep();
          }}
          disabled={selectedActivities.length === 0}
          className={`
            w-full btn-gradient flex items-center justify-center gap-2
            ${selectedActivities.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}
          `}
        >
          Continue to Business Info
          <ChevronRight className="w-5 h-5" />
        </button>
      </div>
    </div>
  );
};
```

### Step 2: Business Information
```tsx
const BusinessInfoStep: React.FC = ({ formData, updateFormData, nextStep, prevStep }) => {
  const [companyData, setCompanyData] = useState({
    companyName: '',
    industry: '',
    employeeCount: '',
    revenue: '',
    foundedYear: '',
    primaryState: ''
  });

  const industries = [
    { value: 'saas', label: 'SaaS / Software', icon: '💻' },
    { value: 'ecommerce', label: 'E-commerce', icon: '🛒' },
    { value: 'fintech', label: 'Financial Services', icon: '💳' },
    { value: 'healthcare', label: 'Healthcare Tech', icon: '🏥' },
    { value: 'manufacturing', label: 'Manufacturing', icon: '🏭' },
    { value: 'consulting', label: 'Consulting', icon: '📊' }
  ];

  return (
    <div className="stagger-item">
      <div className="card-high p-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          Tell Us About Your Business
        </h2>

        <div className="space-y-6">
          {/* Company Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Company Name
            </label>
            <input
              type="text"
              value={companyData.companyName}
              onChange={(e) => setCompanyData({...companyData, companyName: e.target.value})}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl 
                       focus:border-blue-500 focus:ring-4 focus:ring-blue-100 
                       transition-all duration-200"
              placeholder="Acme Technologies Inc."
            />
          </div>

          {/* Industry Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Industry
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {industries.map((industry) => (
                <button
                  key={industry.value}
                  onClick={() => setCompanyData({...companyData, industry: industry.value})}
                  className={`
                    p-3 rounded-lg border-2 transition-all
                    ${companyData.industry === industry.value
                      ? 'border-blue-500 bg-blue-50 transform scale-105'
                      : 'border-gray-200 hover:border-gray-300'}
                  `}
                >
                  <div className="text-2xl mb-1">{industry.icon}</div>
                  <div className="text-sm font-medium">{industry.label}</div>
                </button>
              ))}
            </div>
          </div>

          {/* Employee Count */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Number of Employees
            </label>
            <select
              value={companyData.employeeCount}
              onChange={(e) => setCompanyData({...companyData, employeeCount: e.target.value})}
              className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl 
                       focus:border-blue-500 focus:ring-4 focus:ring-blue-100"
            >
              <option value="">Select range</option>
              <option value="1-10">1-10 employees</option>
              <option value="11-50">11-50 employees</option>
              <option value="51-200">51-200 employees</option>
              <option value="201-500">201-500 employees</option>
              <option value="500+">500+ employees</option>
            </select>
          </div>

          {/* Navigation */}
          <div className="flex gap-4 pt-4">
            <button
              onClick={prevStep}
              className="flex-1 px-6 py-3 border-2 border-gray-300 rounded-xl
                       text-gray-700 font-medium hover:bg-gray-50"
            >
              Back
            </button>
            <button
              onClick={() => {
                updateFormData({ companyInfo: companyData });
                nextStep();
              }}
              disabled={!companyData.companyName || !companyData.industry}
              className="flex-1 btn-gradient"
            >
              Continue to Expenses
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
```

### Step 3: R&D Expense Calculator
```tsx
const ExpenseStep: React.FC = ({ formData, updateFormData, nextStep, prevStep }) => {
  const [expenses, setExpenses] = useState({
    wages: '',
    contractors: '',
    supplies: '',
    cloudSoftware: '',
    other: ''
  });

  const calculateTotal = () => {
    return Object.values(expenses).reduce((sum, val) => sum + (parseFloat(val) || 0), 0);
  };

  const formatCurrency = (value: string) => {
    const num = parseFloat(value.replace(/,/g, '')) || 0;
    return num.toLocaleString();
  };

  return (
    <div className="stagger-item">
      <div className="card-high p-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Calculate Your R&D Expenses
        </h2>
        <p className="text-gray-600 mb-6">
          Include all expenses related to your innovative activities
        </p>

        <div className="space-y-6">
          {/* Expense Inputs */}
          <div className="card-glass p-6 space-y-4">
            <div>
              <label className="flex items-center justify-between mb-2">
                <span className="font-medium text-gray-700">Employee R&D Wages</span>
                <span className="text-sm text-gray-500">Most common qualifier</span>
              </label>
              <div className="relative">
                <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500">$</span>
                <input
                  type="text"
                  value={expenses.wages}
                  onChange={(e) => setExpenses({...expenses, wages: formatCurrency(e.target.value)})}
                  className="w-full pl-8 pr-4 py-3 border-2 border-gray-200 rounded-xl
                           focus:border-blue-500 focus:ring-4 focus:ring-blue-100"
                  placeholder="0"
                />
              </div>
            </div>

            <div>
              <label className="flex items-center justify-between mb-2">
                <span className="font-medium text-gray-700">Contractor Costs</span>
                <span className="text-sm text-gray-500">65% qualifies</span>
              </label>
              <div className="relative">
                <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500">$</span>
                <input
                  type="text"
                  value={expenses.contractors}
                  onChange={(e) => setExpenses({...expenses, contractors: formatCurrency(e.target.value)})}
                  className="w-full pl-8 pr-4 py-3 border-2 border-gray-200 rounded-xl
                           focus:border-blue-500 focus:ring-4 focus:ring-blue-100"
                  placeholder="0"
                />
              </div>
            </div>

            <div>
              <label className="flex items-center justify-between mb-2">
                <span className="font-medium text-gray-700">Cloud & Software</span>
                <span className="text-sm text-gray-500">AWS, tools, licenses</span>
              </label>
              <div className="relative">
                <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500">$</span>
                <input
                  type="text"
                  value={expenses.cloudSoftware}
                  onChange={(e) => setExpenses({...expenses, cloudSoftware: formatCurrency(e.target.value)})}
                  className="w-full pl-8 pr-4 py-3 border-2 border-gray-200 rounded-xl
                           focus:border-blue-500 focus:ring-4 focus:ring-blue-100"
                  placeholder="0"
                />
              </div>
            </div>
          </div>

          {/* Live Total */}
          <div className="bg-gradient-to-r from-blue-50 to-green-50 rounded-xl p-6">
            <div className="flex items-center justify-between">
              <span className="text-lg font-medium text-gray-700">
                Total Qualified Research Expenses
              </span>
              <span className="text-3xl font-bold text-gray-900">
                ${calculateTotal().toLocaleString()}
              </span>
            </div>
            {calculateTotal() > 0 && (
              <p className="text-sm text-gray-600 mt-2">
                Estimated Federal Credit: ${Math.round(calculateTotal() * 0.065).toLocaleString()}
              </p>
            )}
          </div>

          {/* Navigation */}
          <div className="flex gap-4">
            <button onClick={prevStep} className="flex-1 px-6 py-3 border-2 border-gray-300 rounded-xl">
              Back
            </button>
            <button
              onClick={() => {
                updateFormData({ expenses });
                nextStep();
              }}
              disabled={calculateTotal() === 0}
              className="flex-1 btn-gradient"
            >
              Calculate My Credits
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
```

### Step 4: Amazing Results Display
```tsx
const ResultsStep: React.FC = ({ formData, updateFormData }) => {
  const totalQRE = calculateTotalQRE(formData.expenses);
  const federalCredit = Math.round(totalQRE * 0.065);
  const stateCredit = Math.round(totalQRE * 0.05); // Example state credit
  const totalBenefit = federalCredit + stateCredit;

  // Dynamic pricing based on credit amount
  const getPrice = () => {
    if (federalCredit < 10000) return 500;
    if (federalCredit <= 50000) return 750;
    if (federalCredit <= 100000) return 1000;
    return 1500;
  };

  return (
    <div className="stagger-item">
      <div className="card-highest p-8">
        {/* Success Animation */}
        <div className="text-center mb-8 success-bounce">
          <div className="w-20 h-20 mx-auto mb-4 bg-gradient-to-r from-green-400 to-blue-500 
                        rounded-full flex items-center justify-center">
            <Check className="w-10 h-10 text-white" />
          </div>
          <h2 className="text-3xl font-bold text-gray-900 mb-2">
            Congratulations! 🎉
          </h2>
          <p className="text-xl text-gray-600">
            You qualify for significant R&D tax credits
          </p>
        </div>

        {/* Credit Breakdown */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="card-glass p-6 text-center">
            <div className="text-sm font-medium text-gray-600 mb-2">
              Federal R&D Credit
            </div>
            <div className="text-4xl font-bold text-green-600 mb-2">
              ${federalCredit.toLocaleString()}
            </div>
            <div className="text-sm text-gray-500">
              Direct payment from IRS
            </div>
          </div>

          <div className="card-glass p-6 text-center">
            <div className="text-sm font-medium text-gray-600 mb-2">
              Estimated State Credit
            </div>
            <div className="text-4xl font-bold text-blue-600 mb-2">
              ${stateCredit.toLocaleString()}
            </div>
            <div className="text-sm text-gray-500">
              Additional state benefits
            </div>
          </div>
        </div>

        {/* ROI Highlight */}
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-lg font-medium text-gray-700">Your Investment</p>
              <p className="text-3xl font-bold text-gray-900">${getPrice()}</p>
            </div>
            <div className="text-center">
              <div className="text-5xl font-bold text-orange-600">
                {Math.round(federalCredit / getPrice())}x
              </div>
              <p className="text-sm font-medium text-gray-600">ROI</p>
            </div>
            <div className="text-right">
              <p className="text-lg font-medium text-gray-700">Your Return</p>
              <p className="text-3xl font-bold text-green-600">
                ${totalBenefit.toLocaleString()}
              </p>
            </div>
          </div>
        </div>

        {/* What's Included */}
        <div className="mb-8">
          <h3 className="font-semibold text-gray-900 mb-4">
            Your Complete R&D Credit Package Includes:
          </h3>
          <div className="grid md:grid-cols-2 gap-3">
            {[
              'IRS Form 6765 - Completed & Ready to File',
              'Technical Narrative Documentation',
              'QRE Calculation Workbook',
              'Audit Defense Documentation',
              'Multi-Year Credit Analysis',
              'State Credit Applications',
              'Filing Instructions Guide',
              'Ongoing Support Access'
            ].map((item, index) => (
              <div key={index} className="flex items-center gap-2">
                <Check className="w-5 h-5 text-green-600 flex-shrink-0" />
                <span className="text-gray-700">{item}</span>
              </div>
            ))}
          </div>
        </div>

        {/* CTA */}
        <Link href="/checkout">
          <button className="w-full btn-gradient text-xl py-4 transform hover:scale-105">
            Get My R&D Tax Credits Now
          </button>
        </Link>

        {/* Urgency */}
        <div className="mt-6 text-center">
          <p className="text-sm text-orange-600 font-medium">
            ⏰ 2022 credits expire July 2026 - Don't leave money on the table
          </p>
        </div>
      </div>
    </div>
  );
};
```

## Step 5: Enhancement Features

### 1. Smart Recommendations Engine
Add contextual tips throughout the form:

```tsx
const SmartTip: React.FC<{ industry: string, step: number }> = ({ industry, step }) => {
  const tips = {
    saas: {
      1: "SaaS companies typically qualify for credits on product development, API integrations, and performance optimizations",
      3: "Don't forget cloud infrastructure costs and developer tools licenses"
    },
    ecommerce: {
      1: "E-commerce innovations like recommendation engines and checkout optimizations qualify",
      3: "Include costs for A/B testing tools and analytics platforms"
    }
  };

  return (
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <p className="text-sm text-blue-800">
        💡 <strong>Pro Tip:</strong> {tips[industry]?.[step]}
      </p>
    </div>
  );
};
```

### 2. Risk Assessment System
Add validation and warnings:

```tsx
const RiskIndicator: React.FC<{ expenses: any }> = ({ expenses }) => {
  const totalExpenses = calculateTotal(expenses);
  const wagePercentage = (expenses.wages / totalExpenses) * 100;
  
  if (wagePercentage < 50) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-sm text-yellow-800">
          ⚠️ Most R&D credits come from employee wages. Consider reviewing your wage calculations.
        </p>
      </div>
    );
  }
  return null;
};
```

### 3. Progress Persistence
Save form data to localStorage:

```tsx
// Auto-save hook
useEffect(() => {
  const saveData = debounce(() => {
    localStorage.setItem('rdCalculatorData', JSON.stringify(formData));
  }, 1000);
  
  saveData();
}, [formData]);

// Load saved data on mount
useEffect(() => {
  const saved = localStorage.getItem('rdCalculatorData');
  if (saved) {
    setFormData(JSON.parse(saved));
  }
}, []);
```

## Step 6: Polish & Performance

### 1. Loading States
```tsx
const LoadingSpinner = () => (
  <div className="flex justify-center py-8">
    <div className="w-12 h-12 border-4 border-blue-200 border-t-blue-600 
                  rounded-full animate-spin"></div>
  </div>
);
```

### 2. Error Handling
```tsx
const ErrorBoundary: React.FC = ({ children }) => {
  return (
    <ErrorBoundary fallback={
      <div className="card-high p-8 text-center">
        <p className="text-red-600 mb-4">Something went wrong</p>
        <button onClick={() => window.location.reload()} 
                className="btn-gradient">
          Reload Calculator
        </button>
      </div>
    }>
      {children}
    </ErrorBoundary>
  );
};
```

### 3. Mobile Optimization
```css
@media (max-width: 768px) {
  .card-high {
    padding: 1.5rem;
  }
  
  .btn-gradient {
    padding: 0.875rem 1.5rem;
    font-size: 0.875rem;
  }
  
  .stagger-container .stagger-item {
    animation-delay: 0ms !important;
  }
}
```

## Summary

This calculator combines:
- **Sophisticated Design**: 5-level card system, glass morphism, gradient buttons
- **Smooth Animations**: Stagger effects, success celebrations, micro-interactions  
- **Smart UX**: Progress saving, contextual tips, risk warnings
- **Conversion Optimization**: ROI focus, urgency messaging, clear value props
- **Modern Tech**: React hooks, TypeScript, Tailwind CSS
- **Performance**: Debounced saves, lazy loading, error boundaries

The result is a world-class calculator that not only looks amazing but converts visitors into customers by clearly demonstrating value and making the complex R&D credit process feel simple and achievable.