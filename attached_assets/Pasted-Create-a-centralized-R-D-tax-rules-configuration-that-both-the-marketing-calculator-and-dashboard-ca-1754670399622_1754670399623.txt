Create a centralized R&D tax rules configuration that both the marketing calculator and dashboard can use. This ensures consistency, makes updates easier, and prevents drift between the two systems.

## CREATE NEW FILE: shared/taxRules/rdTaxRules.ts

```typescript
// shared/taxRules/rdTaxRules.ts

export const RDTaxRules = {
  // Update these values as tax law changes
  lastUpdated: "2025-01-01",
  taxYear: 2025,
  
  // Federal Credit Rates
  federalRates: {
    startup: {
      rate: 0.14,
      name: "Startup Method",
      description: "14% credit for qualifying startups",
      requirements: [
        "Less than 5 years in business",
        "No gross receipts 3+ years ago",
        "Qualified trade or business"
      ],
      benefits: [
        "14% credit rate (highest available)",
        "Can offset up to $500K in payroll taxes",
        "No AMT limitations"
      ]
    },
    qualifiedSmallBusiness: {
      rate: 0.10,
      name: "Small Business Enhanced Rate",
      description: "10% effective rate for QSBs",
      requirements: [
        "Less than $5M average gross receipts",
        "Less than 5 years since first gross receipts",
        "Active trade or business"
      ],
      benefits: [
        "10% effective credit rate",
        "Payroll tax offset available",
        "Simplified documentation"
      ]
    },
    standard: {
      rate: 0.065,
      name: "Alternative Simplified Credit",
      description: "Standard 6.5% ASC rate",
      requirements: [
        "Any business with qualifying R&D"
      ],
      benefits: [
        "No base period calculation needed",
        "Straightforward computation"
      ]
    }
  },

  // Expense Qualification Rates by Type and Industry
  qualificationRates: {
    byIndustry: {
      "Software/Tech": {
        wages: { rate: 0.90, description: "90% for technical staff" },
        contractors: { rate: 0.65, description: "IRS 65% limit" },
        software: { rate: 1.00, description: "100% for dev tools" },
        cloud: { rate: 0.85, description: "85% for infrastructure" },
        aiTools: { rate: 1.00, description: "100% for AI/ML" },
        supplies: { rate: 0.80, description: "80% for materials" },
        equipment: { rate: 0.60, description: "60% for hardware" }
      },
      "Professional Services": {
        wages: { rate: 0.75, description: "75% for mixed roles" },
        contractors: { rate: 0.65, description: "IRS limit" },
        software: { rate: 0.80, description: "80% partial use" },
        cloud: { rate: 0.70, description: "70% for tools" },
        aiTools: { rate: 1.00, description: "100% for automation" },
        supplies: { rate: 0.60, description: "60% average" }
      },
      "Manufacturing": {
        wages: { rate: 0.70, description: "70% for engineering" },
        contractors: { rate: 0.65, description: "IRS limit" },
        software: { rate: 0.90, description: "90% for CAD/CAM" },
        materials: { rate: 0.85, description: "85% for prototypes" },
        equipment: { rate: 0.50, description: "50% for testing" },
        aiTools: { rate: 0.90, description: "90% for optimization" }
      },
      "default": {
        wages: { rate: 0.80, description: "80% standard" },
        contractors: { rate: 0.65, description: "IRS limit" },
        software: { rate: 0.90, description: "90% for R&D tools" },
        cloud: { rate: 0.80, description: "80% average" },
        supplies: { rate: 0.70, description: "70% typical" },
        aiTools: { rate: 1.00, description: "100% for innovation" }
      }
    }
  },

  // State Credit Information
  stateCredits: {
    "California": { 
      rate: 0.24, 
      name: "California R&D Credit",
      carryforward: 15,
      refundable: false,
      maxCredit: null,
      notes: "24% credit, among the highest"
    },
    "New York": { 
      rate: 0.09, 
      name: "NY R&D Tax Credit",
      carryforward: 15,
      refundable: true,
      maxCredit: null,
      notes: "9% credit, refundable for small businesses"
    },
    // Add all states...
  },

  // Pricing Tiers
  pricingTiers: [
    { min: 0, max: 10000, price: 500, name: "Starter" },
    { min: 10000, max: 50000, price: 750, name: "Growth" },
    { min: 50000, max: 100000, price: 1000, name: "Scale" },
    { min: 100000, max: Infinity, price: 1500, name: "Enterprise" }
  ],

  // Business Classifications
  businessClassifications: {
    qualifiedSmallBusiness: {
      revenueLimit: 5000000,
      yearsLimit: 5,
      payrollOffsetLimit: 500000, // Increased for 2025
      simplifiedDocs: true
    },
    startup: {
      yearsLimit: 5,
      noRevenueYearsAgo: 3,
      maxPayrollOffset: 500000
    }
  },

  // Documentation Requirements
  documentationRequirements: {
    minimal: {
      threshold: 50000,
      required: ["Form 6765", "Basic narrative", "Expense summary"],
      description: "Simplified documentation for credits under $50K"
    },
    standard: {
      threshold: 250000,
      required: ["Form 6765", "Technical narrative", "Time tracking", "Project documentation"],
      description: "Standard documentation for most claims"
    },
    comprehensive: {
      threshold: Infinity,
      required: ["Form 6765", "Detailed narrative", "Time studies", "Project documentation", "Nexus study"],
      description: "Comprehensive documentation for large claims"
    }
  },

  // Risk Thresholds
  riskThresholds: {
    rdPercentage: {
      low: { max: 0.60, risk: "low" },
      medium: { max: 0.85, risk: "medium" },
      high: { max: 1.00, risk: "high" }
    },
    creditAmount: {
      low: { max: 50000, risk: "low" },
      medium: { max: 250000, risk: "medium" },
      high: { max: Infinity, risk: "high" }
    }
  },

  // Qualifying Activities (for both calculator and dashboard)
  qualifyingActivities: {
    software: [
      "Developing new algorithms or software architectures",
      "Creating custom integrations or APIs",
      "Building automated workflows or processes",
      "Implementing and customizing AI/ML solutions",
      "Optimizing performance or scalability"
    ],
    general: [
      "Developing new or improved products/processes",
      "Experimenting with new technologies",
      "Creating prototypes or proof of concepts",
      "Testing and iterating on solutions",
      "Resolving technical uncertainties"
    ]
  },

  // IRS Four-Part Test
  fourPartTest: {
    permitted: {
      name: "Permitted Purpose",
      description: "Developing new or improved functionality, performance, reliability, or quality"
    },
    technological: {
      name: "Technological in Nature",
      description: "Relying on principles of physical or biological sciences, computer science, or engineering"
    },
    uncertainty: {
      name: "Elimination of Uncertainty",
      description: "Uncertainty about capability, method, or design"
    },
    experimentation: {
      name: "Process of Experimentation",
      description: "Evaluating alternatives through modeling, simulation, or systematic trial and error"
    }
  },

  // Deadline Information
  deadlines: {
    amendmentDeadline: {
      2022: "2026-07-15",
      2023: "2027-07-15",
      2024: "2028-07-15"
    },
    quarterlyPayroll: {
      Q1: "04-30",
      Q2: "07-31",
      Q3: "10-31",
      Q4: "01-31"
    }
  }
};

// Helper Functions
export function calculateFederalRate(business: BusinessProfile): FederalRateInfo {
  const rules = RDTaxRules.businessClassifications;
  
  // Check startup status
  if (business.yearsInBusiness < rules.startup.yearsLimit && 
      !business.hadRevenueYearsAgo(rules.startup.noRevenueYearsAgo)) {
    return {
      ...RDTaxRules.federalRates.startup,
      qualifies: true
    };
  }
  
  // Check QSB status
  if (business.annualRevenue < rules.qualifiedSmallBusiness.revenueLimit &&
      business.yearsInBusiness < rules.qualifiedSmallBusiness.yearsLimit) {
    return {
      ...RDTaxRules.federalRates.qualifiedSmallBusiness,
      qualifies: true
    };
  }
  
  // Default to standard
  return {
    ...RDTaxRules.federalRates.standard,
    qualifies: true
  };
}

export function getQualificationRate(industry: string, expenseType: string): number {
  const industryRates = RDTaxRules.qualificationRates.byIndustry[industry] || 
                       RDTaxRules.qualificationRates.byIndustry.default;
  return industryRates[expenseType]?.rate || 0.80;
}

export function getPricingTier(creditAmount: number): PricingTier {
  return RDTaxRules.pricingTiers.find(
    tier => creditAmount >= tier.min && creditAmount < tier.max
  ) || RDTaxRules.pricingTiers[RDTaxRules.pricingTiers.length - 1];
}

export function getDocumentationLevel(creditAmount: number): DocumentationRequirement {
  for (const [level, req] of Object.entries(RDTaxRules.documentationRequirements)) {
    if (creditAmount < req.threshold) {
      return { level, ...req };
    }
  }
  return { level: 'comprehensive', ...RDTaxRules.documentationRequirements.comprehensive };
}

// Type exports for TypeScript
export type FederalRateInfo = typeof RDTaxRules.federalRates.startup & { qualifies: boolean };
export type PricingTier = typeof RDTaxRules.pricingTiers[0];
export type DocumentationRequirement = typeof RDTaxRules.documentationRequirements.minimal & { level: string };
UPDATE CALCULATOR TO USE RULES
In the marketing calculator:
typescript// client/src/components/CreditCalculator.tsx
import { RDTaxRules, calculateFederalRate, getQualificationRate, getPricingTier } from '@/shared/taxRules/rdTaxRules';

// In calculation logic:
const federalRateInfo = calculateFederalRate({
  yearsInBusiness,
  annualRevenue,
  hadRevenueYearsAgo: (years) => businessAge > years
});

const qualificationRates = industry ? 
  RDTaxRules.qualificationRates.byIndustry[industry] :
  RDTaxRules.qualificationRates.byIndustry.default;

const federalCredit = totalQRE * federalRateInfo.rate;
const pricingTier = getPricingTier(federalCredit);
UPDATE DASHBOARD TO USE SAME RULES
In the dashboard forms:
typescript// client/src/components/ExpenseCollectionForm.tsx
import { RDTaxRules, getQualificationRate } from '@/shared/taxRules/rdTaxRules';

// When calculating expenses:
const qualRate = getQualificationRate(company.industry, 'wages');
const suggestedPercentage = qualRate * 100;

// Show rate justification:
<Tooltip content={`Industry standard: ${RDTaxRules.qualificationRates.byIndustry[industry].wages.description}`} />
ADD ADMIN INTERFACE (OPTIONAL)
Create an admin page to update rules without code changes:
typescript// client/src/pages/admin/TaxRulesConfig.tsx
export const TaxRulesConfig = () => {
  const [rules, setRules] = useState(RDTaxRules);
  
  return (
    <div className="admin-panel">
      <h1>R&D Tax Rules Configuration</h1>
      
      <section>
        <h2>Federal Rates</h2>
        {Object.entries(rules.federalRates).map(([key, rate]) => (
          <input 
            key={key}
            type="number" 
            value={rate.rate} 
            onChange={(e) => updateRate(key, e.target.value)}
          />
        ))}
      </section>
      
      <button onClick={() => saveRulesToDatabase(rules)}>
        Save Rules
      </button>
    </div>
  );
};
BENEFITS OF THIS APPROACH

Single Source of Truth: All tax rules in one place
Easy Updates: Change rates/rules once, affects entire app
Consistency: Calculator and dashboard always use same logic
Testability: Can unit test all tax calculations
Documentation: Rules serve as documentation
Compliance: Easy to audit what rules are being applied
Version Control: Can track rule changes over time

MIGRATION PATH

Create the shared rules file
Update calculator to import from rules
Update dashboard to import from rules
Remove hardcoded values throughout codebase
Add tests to verify both systems calculate identically