Please add comprehensive security middleware to the Express server to protect against common vulnerabilities.

Install these security packages by adding them to package.json dependencies:

json"helmet": "^7.1.0",
"express-rate-limit": "^7.1.5",
"cors": "^2.8.5",
"express-mongo-sanitize": "^2.2.0",
"hpp": "^0.2.3"

Create a new file server/middleware/security.ts with security configurations:

typescriptimport helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import cors from 'cors';
import mongoSanitize from 'express-mongo-sanitize';
import hpp from 'hpp';

// Rate limiting configurations
export const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 requests per windowMs
  message: 'Too many login attempts, please try again later',
  standardHeaders: true,
  legacyHeaders: false,
});

export const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests, please try again later',
  standardHeaders: true,
  legacyHeaders: false,
});

export const strictLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 10, // limit each IP to 10 requests per hour for sensitive operations
  message: 'Too many requests for this operation, please try again later',
});

// CORS configuration
export const corsOptions = {
  origin: function (origin: any, callback: any) {
    // Allow requests from Replit domains and localhost for development
    const allowedOrigins = [
      'http://localhost:5000',
      'http://localhost:3000',
      /\.replit\.dev$/,
      /\.repl\.co$/
    ];
    
    // Allow requests with no origin (like mobile apps or Postman)
    if (!origin) return callback(null, true);
    
    const isAllowed = allowedOrigins.some(allowed => {
      if (allowed instanceof RegExp) {
        return allowed.test(origin);
      }
      return allowed === origin;
    });
    
    if (isAllowed) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  maxAge: 86400 // 24 hours
};

Update server/index.ts to use these security middlewares. Add these lines BEFORE the JSON parsing middleware:

typescript// Import security middleware
import helmet from 'helmet';
import cors from 'cors';
import mongoSanitize from 'express-mongo-sanitize';
import hpp from 'hpp';
import { corsOptions, apiLimiter, loginLimiter, strictLimiter } from './middleware/security';

// Apply security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

app.use(cors(corsOptions));
app.use(mongoSanitize()); // Prevent NoSQL injection attacks
app.use(hpp()); // Prevent HTTP Parameter Pollution

// Apply general rate limiting to all API routes
app.use('/api/', apiLimiter);

// Apply strict rate limiting to sensitive endpoints
app.use('/api/login', loginLimiter);
app.use('/api/generate-report', strictLimiter);
app.use('/api/stripeWebhook', strictLimiter);

Add request size limits to prevent large payload attacks:

typescriptapp.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: false, limit: '10mb' }));

Add security headers for API responses in each route file:

typescriptres.set({
  'X-Content-Type-Options': 'nosniff',
  'X-Frame-Options': 'DENY',
  'X-XSS-Protection': '1; mode=block'
});
Make sure the application still works properly with these security measures in place. The rate limiting will prevent brute force attacks, CORS will control which domains can access your API, and helmet will add various security headers.